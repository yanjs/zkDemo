import "hashes/sha256/512bitPadded" as sha256;
from "./Add" import add;
from "./Cmp" import cmp;
from "./Config" import N_MIX;
from "./Contains" import contains_v;
from "./Xor" import xor;

const u32 N_SPLIT = 2;

/*
private   secret
public    nullifier := hash(secret, 0)
protected enc_key := hash(secret, 1)
public    note_id := hash(enc_key, 0)
private   amt
public    encrypted_amt := amt ^ enc_key
*/

def main(\
    u32[8] nullifier, /* of input */ \
    u32[N_MIX][8] mixed_note_ids, /* input */ \
    u32[N_MIX][8] mixed_enc_amts, /* input */ \
    u32[N_SPLIT][8] new_note_ids, /* output */ \
    u32[N_SPLIT][8] new_amts, /* output */ \
    private u32[8] secret, /* input */ \
    private u32[8] note_id, /* input */ \
    private u32[N_SPLIT][8] enc_keys, /* output */ \
    private u32[N_SPLIT][8] amts /* output */ \
) {
    u32[8] zero = [0;8];
    u32[8] one = [0,0,0,0,0,0,0,1];

    u32[8] mut sum = [0;8];
    for u32 i in 0..N_SPLIT {
        sum = add(sum, amts[i]);
    }

    // assert note_id == sha256(sha256(secret, 1))
    u32[8] enc_key = sha256(secret, one);
    u32[8] exp_note_id = sha256(enc_key, zero);
    assert(exp_note_id == note_id);

    // assert note_id in mixed_note_ids
    u32[N_MIX][8] mut mixed_amts = [[0;8];N_MIX];
    for u32 i in 0..N_MIX {
        mixed_amts[i] = xor(mixed_enc_amts[i], enc_key);
    }
    assert(contains_v(mixed_note_ids, mixed_amts, note_id, sum));

    // assert nullifier == sha256(secret, 0)
    u32[8] exp_nullifier = sha256(secret, zero);
    assert(exp_nullifier == nullifier);

    // assert new_note_ids = sha256(new_note_ls, amt)
    for u32 i in 0..N_SPLIT {
        u32[8] exp_new_note_id = sha256(enc_keys[i], zero);
        assert(exp_new_note_id == new_note_ids[i]);
    }

    // assert new_amts = amts ^ enc_key
    for u32 i in 0..N_SPLIT {
        assert(xor(amts[i], enc_keys[i]) == new_amts[i]);
    }

    return;
}